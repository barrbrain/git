#!/bin/bash
set -o pipefail
set -e

die () {
	printf >&2 'fatal: %s\n' "$*"
	exit 128
}

usage () {
	printf >&2 'usage: %s\n' "$*"
	exit 129
}

svnrdump_wrap () {
	exec 6<&1 &&

	EX=$(
		(svnrdump dump --non-interactive --username=Guest --password= \
			--quiet "$1" "$2" >&6) 2>&1; test $? -ne 0 || echo Success
	) &&
	if test "z$EX" != "zSuccess"; then
		if test "z$EX" = "zLOWER cannot be greater than UPPER."; then
			return 0
		fi
		echo "$EX" >&2
		return 1
	fi
}

try_svnrdump () {
	command -v svnrdump >/dev/null &&
	echo svnrdump_wrap ||
	true
}

svnadmin_wrap () {
	path=${1##file://} &&
	test "z$path" != "z$1" &&
	latest=$(svnlook youngest "$path") &&
	future=$(( $latest + 1 )) &&
	asked=${2#-r} &&
	asked=${asked%:*} &&
	test "$asked" -eq "$future" ||
	svnadmin dump --incremental --deltas --quiet "$path" "$2"
}

try_svnadmin () {
	command -v svnadmin >/dev/null &&
	command -v svnlook >/dev/null &&
	echo svnadmin_wrap ||
	true
}

SVNDUMP=""
SVNDUMP=${SVNDUMP:-`try_svnrdump`}
SVNDUMP=${SVNDUMP:-`try_svnadmin`}
test -n "$SVNDUMP" || die "neither svnrdump nor svnadmin & svnlook was found"

git_dir=""
marks_dir="info/fast-import/svn-alpha/$repo"

do_gen_marks () {
	notes=$1
	test "z$git_dir" != "$z" || die "we were not told the gitdir"
	git --git-dir="$git_dir" ls-tree -r "$notes" |
	{
		while read -r mode type sha path
		do
			data=$(git --git-dir="$git_dir" cat-file blob $sha | tail -n 1)
			data=${data##r}
			commit=$(echo $path | tr -d /)
			echo ":$data $commit"
		done
	}
}

prepare_marks () {
	dst=$1 notes=$2 rev=$3
	test "z$git_dir" != "$z" || die "we were not told the gitdir"
	path="$git_dir/$marks_dir"
	mkdir -p "$path"
	path="$path/marks"

	if test ! -f "$path"; then
		touch "$path"
	fi
	if test "$rev" = "-1"; then
		return 0
	fi
	mark_sha=""
	{
		while read -r m sha
		do
			if test "$m" = ":$rev"; then
				mark_sha="$sha"
			fi
		done
	} <"$path"
	dst_sha=$( git rev-parse "$dst" )
	if test -n "$mark_sha"; then
		test "$mark_sha" = "$dst_sha" || die "latest mark and note diverge"
	else
		do_gen_marks "$notes" >"$path"
	fi
}

last_imported_rev () {
	dst=$1 notes=$2
	test "z$git_dir" != "$z" || die "we were not told the gitdir"
	git --git-dir="$git_dir" show-ref -q --verify $dst || {
		echo "-1"
		return 0
	}
	rev=$(git --git-dir="$git_dir" log --show-notes="$notes" -1 --format=%N $dst)
	rev=${rev##r}
	test "z$rev" != "z" || {
		die "remote HEAD has no note"
	}
	echo $rev
}

do_import () {
	revs=$1 url=$2 dst=$3 notes=$4
	rev=$(last_imported_rev "$dst" "$notes")
	start_rev=$(($rev + 1))
	revs="$start_rev:HEAD"
	prepare_marks $dst $notes $rev
	echo "feature import-marks=$git_dir/$marks_dir/marks"
	echo "feature export-marks=$git_dir/$marks_dir/marks"
	(eval "$SVNDUMP \"$url\" -r\"$revs\"" |	svn-fe --ref="$dst" --notes-ref="$notes" --incremental --no-progress) 3<&0 || die "FAILURE"
	exec 1>&-
}

test "${2+set}" ||
usage 'git remote-svn-alpha <repository> <URL> < commandlist'
repo=$1
url=$2
need_import=""
remote_ref="refs/heads/master"
private_ref="refs/svn-alpha/$repo/SVNHEAD"
remote_notes="refs/notes/svnr"
private_notes="refs/svn-alpha/$repo/SVNR"

while read -r cmd args
do
	case $cmd in
	capabilities)
		echo import
		echo gitdir
		echo "refspec HEAD:$private_ref"
		echo "refspec $remote_ref:$private_ref"
		echo "refspec $remote_notes:$private_notes"
		echo
		;;
	gitdir)
		git_dir="$args"
		;;
	list)
		echo "? HEAD"
		echo "? $remote_ref"
		echo
		;;
	import)
		test "$args" = "HEAD" || test "$args" = "$remote_ref" ||
		die "remote-svn-alpha: unsupported import ref argument: $args"
		need_import="yes"
		;;
	'')
		test "$need_import" = "yes" || exit 0
		do_import 0:HEAD "$url" "$private_ref" "$private_notes"
		need_import=""
		;;
	*)
		die "remote-svn-alpha: unsupported command: $cmd $args"
	esac
done
